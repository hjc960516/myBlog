import{_ as s,c as i,o as a,a3 as n}from"./chunks/framework.BnxM7XkK.js";const E=JSON.parse('{"title":"","description":"","frontmatter":{"outline":"deep","prev":{"text":"child_process模块","link":"/node/child_process"},"next":{"text":"events事件触发器","link":"/node/events"}},"headers":[],"relativePath":"node/ffmpeg.md","filePath":"node/ffmpeg.md"}'),e={name:"node/ffmpeg.md"},p=n(`<p>FFmpeg 是一个开源的跨平台多媒体处理工具，可以用于处理音频、视频和多媒体流。它提供了一组强大的命令行工具和库，可以进行视频转码、视频剪辑、音频提取、音视频合并、流媒体传输等操作。</p><h2 id="ffmpeg-的主要功能和特性" tabindex="-1">FFmpeg 的主要功能和特性 <a class="header-anchor" href="#ffmpeg-的主要功能和特性" aria-label="Permalink to &quot;FFmpeg 的主要功能和特性&quot;">​</a></h2><ol><li>格式转换：FFmpeg 可以将一个媒体文件从一种格式转换为另一种格式，支持几乎所有常见的音频和视频格式，包括 MP4、AVI、MKV、MOV、FLV、MP3、AAC 等。</li><li>视频处理：FFmpeg 可以进行视频编码、解码、裁剪、旋转、缩放、调整帧率、添加水印等操作。 你可以使用它来调整视频的分辨率、剪辑和拼接视频片段，以及对视频进行各种效果处理</li><li>音频处理：FFmpeg 可以进行音频编码、解码、剪辑、混音、音量调节等操作。你可以用它来提取音频轨道、剪辑和拼接音频片段，以及对音频进行降噪、均衡器等处理</li><li>流媒体传输：FFmpeg 支持将音视频流实时传输到网络上，可以用于实时流媒体服务、直播和视频会议等应用场景。</li><li>视频处理效率高：FFmpeg 是一个高效的工具，针对处理大型视频文件和高分辨率视频进行了优化，可以在保持良好质量的同时提供较快的处理速度。</li><li>跨平台支持：FFmpeg 可以在多个操作系统上运行，包括 Windows、MacOS、Linux 等，同时支持多种硬件加速技术， 如 NVIDIA CUDA 和 Intel Quick Sync Video</li></ol><h2 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h2><p><code>FFmpeg官网下载地址</code>: (<a href="https://ffmpeg.p2hp.com/download.html" target="_blank" rel="noreferrer">ffmpeg.p2hp.com/download.ht…</a>)<br> 根据对应的<code>系统</code>下载完成以后, 配置<code>环境变量</code>, 终端输入<code>ffmpeg -version</code>即可查看是否安装成功</p><h2 id="利用-node-子进程使用-ffmpeg-操作视频" tabindex="-1">利用 node 子进程使用 ffmpeg 操作视频 <a class="header-anchor" href="#利用-node-子进程使用-ffmpeg-操作视频" aria-label="Permalink to &quot;利用 node 子进程使用 ffmpeg 操作视频&quot;">​</a></h2><h3 id="剪切视频" tabindex="-1">剪切视频 <a class="header-anchor" href="#剪切视频" aria-label="Permalink to &quot;剪切视频&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">execSync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">spawn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;node:child_process&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 裁剪视频 -ss: 开始时间  -to: 结束时间 -i: 输出的源视频</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">execSync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`ffmpeg -ss 20 -to 30 -i ./ffmpeg/test1.mp4 ./ffmpeg/test1_20.mp4\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  stdout: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;inherit&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h3 id="mp4-转其他格式" tabindex="-1">mp4 转其他格式 <a class="header-anchor" href="#mp4-转其他格式" aria-label="Permalink to &quot;mp4 转其他格式&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 将裁剪的视频转为gif或者mp3等等格式</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">execSync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`ffmpeg -i ./ffmpeg/test1_20.mp4 ./ffmpeg/test1_20.gif\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  stdout: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;inherit&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h3 id="加水印" tabindex="-1">加水印 <a class="header-anchor" href="#加水印" aria-label="Permalink to &quot;加水印&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 给裁剪过的视频添加水印, 注意不能换行</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// -vf drawtext=  添加文字</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// text=&quot;添加水印了&quot;  文字内容</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// fontsize=30  字体大小</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// fontcolor=red  字体颜色</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// x=30:y=30   文字的位置</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">execSync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  \`ffmpeg -i ./ffmpeg/test1_20.mp4 -vf drawtext=text=&quot;添加水印了&quot;:fontsize=30:fontcolor=red:x=30:y=30 ./ffmpeg/make_test_20.mp4\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    stdout: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;inherit&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 其他的操作也可以用spawn</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// const { stdout, stderr } = spawn(&#39;ffmpeg&#39;,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   &#39;-i&#39;,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   &#39;./ffmpeg/test1_20.mp4&#39;,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   &#39;-vf&#39;,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   &#39;drawtext=text=&quot;添加水印了&quot;:fontsize=30:fontcolor=red:x=30:y=30&#39;, &#39;./ffmpeg/make_test_20.mp4&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ])</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// stdout.on(&#39;data&#39;, (data) =&gt; {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   console.log(data);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// })</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// stdout.on(&#39;end&#39;, () =&gt; {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   console.log(&#39;end&#39;);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// })</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// stderr.on(&#39;data&#39;, (err) =&gt; {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   console.log(err);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// })</span></span></code></pre></div><h3 id="去掉水印" tabindex="-1">去掉水印 <a class="header-anchor" href="#去掉水印" aria-label="Permalink to &quot;去掉水印&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 删除水印</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * -vf delogo=w=150:h=30:x=30:y=30</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * w=150  五个字符，一个字符30px，所以宽是150px</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * h=30   高是30px</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * x=30:y=30   logo的位置</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">execSync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  \`ffmpeg -i ./ffmpeg/make_test_20.mp4 -vf delogo=w=150:h=30:x=30:y=30 ./ffmpeg/nomake_test_20.mp4\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div>`,14),l=[p];function t(h,k,d,r,o,c){return a(),i("div",null,l)}const y=s(e,[["render",t]]);export{E as __pageData,y as default};

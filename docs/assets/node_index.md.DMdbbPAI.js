import{_ as e,c as n,o as a,a3 as l,a8 as s}from"./chunks/framework.DnQ6fn33.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{"outline":"deep","prev":{"text":"vue3的渲染器、生命周期、组件、nextTick","link":"/vue/render"},"next":{"text":"npm的配置文件、install的原理、run的原理、npm生命周期、npx命令","link":"/node/npm"}},"headers":[],"relativePath":"node/index.md","filePath":"node/index.md"}'),i={name:"node/index.md"},p=l('<h2 id="nodejs-介绍、安装、npm-命令、应用" tabindex="-1">nodejs 介绍、安装、npm 命令、应用 <a class="header-anchor" href="#nodejs-介绍、安装、npm-命令、应用" aria-label="Permalink to &quot;nodejs 介绍、安装、npm 命令、应用&quot;">​</a></h2><h3 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-label="Permalink to &quot;介绍&quot;">​</a></h3><ol><li>nodejs 并不是 JavaScript 应用，也不是编程语言，因为编程语言使用的 JavaScript,Nodejs 是 JavaScript 的运行时。</li><li>Nodejs 是构建在 V8 引擎之上的，V8 引擎是由 C/C++编写的，因此我们的 JavaSCript 代码需要由 C/C++转化后再执行。</li><li>NodeJs 使用异步 I/O 和事件驱动的设计理念，可以高效地处理大量并发请求，提供了非阻塞式 I/O 接口和事件循环机制，使得开发人员可以编写高性能、可扩展的应用程序,异步 I/O 最终都是由 libuv 事件循环库去实现的</li><li>NodeJs 使用 npm 作为包管理工具类似于 python 的 pip，或者是 java 的 Maven，目前 npm 拥有上百万个模块</li><li>nodejs 适合干一些 IO 密集型应用，不适合 CPU 密集型应用，nodejsIO 依靠 libuv 有很强的处理能力，而 CPU 因为 nodejs 单线程原因，容易造成 CPU 占用率高，如果非要做 CPU 密集型应用，可以使用 C++插件编写 或者 nodejs 提供的 cluster。(CPU 密集型指的是图像的处理 或者音频处理需要大量数据结构 + 算法)</li><li>架构图 <img src="'+s+`" alt="&#39;nodejs架构图&#39;" title="nodejs架构图"></li></ol><h3 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h3><h4 id="官网" tabindex="-1">官网 <a class="header-anchor" href="#官网" aria-label="Permalink to &quot;官网&quot;">​</a></h4><ol><li><p>英文网:<a href="https://nodejs.org/en" target="_blank" rel="noreferrer">nodejs.org/en</a></p></li><li><p>中文网:<a href="https://www.nodejs.com.cn/" target="_blank" rel="noreferrer">nodejs.org/cn</a></p></li></ol><h4 id="版本" tabindex="-1">版本 <a class="header-anchor" href="#版本" aria-label="Permalink to &quot;版本&quot;">​</a></h4><ul><li>LTS 长期支持版</li><li>Current 尝鲜版 然后选择对应的系统安装包, 一路 next</li></ul><h4 id="查看是否安装成功" tabindex="-1">查看是否安装成功 <a class="header-anchor" href="#查看是否安装成功" aria-label="Permalink to &quot;查看是否安装成功&quot;">​</a></h4><p>输入命令后，回车，输出版本号即为成功</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span></span></code></pre></div><h3 id="npm-命令" tabindex="-1">npm 命令 <a class="header-anchor" href="#npm-命令" aria-label="Permalink to &quot;npm 命令&quot;">​</a></h3><p>npm: npm (全称 Node Package Manager)是 node.js 的包管理工具，它是一个基于命令行的工具，用于开发者在自己项目中安装、升级、移除和管理依赖项</p><ol><li><p>npm 库: <a href="https://www.npmjs.com/" target="_blank" rel="noreferrer">www.npmjs.com/</a></p></li><li><p><span style="color:red;">npm init</span> : 初始化一个新的 npm 项目，创建 package.json 文件, <br><code>npm init -y</code>则是快速生成</p></li><li><p><span style="color:red;">npm install</span> : 根据 package.json 文件 下载依赖 且会在当前目录存放一个 node_modules。 <br>简写: <code>npm i</code></p><div class="warning custom-block"><p class="custom-block-title">注意</p><p>注意：如果没有 package-lock.json 文件也会生成 如果有就会比较 lock 文件与 package.json 是否一致 如果不一致就更新 lock 里面文件</p></div></li><li><p><span style="color:red;">npm install 包名</span> : 安装指定包,并将其添加到 package.json 文件 <code>生产依赖</code>中</p></li><li><p><span style="color:red;">npm install 包名 --save-dev</span> : 安装指定包,并将其添加到 package.json 文件 <code>开发依赖</code>中 <br>简写: <code>npm i 包名 -D</code></p></li><li><p><span style="color:red;">npm install 包名 -g</span> : 全局安装</p></li><li><p><span style="color:red;">npm update 包名</span> : 更新包 <br>简写: <code>npm up 包名</code></p></li><li><p><span style="color:red;">npm uninstall 包名</span> : 卸载包 <br>简写: <code>npm un 包名</code></p></li><li><p><span style="color:red;">npm run 指令名</span> : 指令名: 在<code>package.json</code>文件中的<code>script</code>中配置</p></li><li><p><span style="color:red;">npm search 关键词</span> : 在 npm 库中搜索包</p></li><li><p><span style="color:red;">npm info 包名</span> : 查看包的详细信息</p></li><li><p><span style="color:red;">npm list</span> : 查看当前项目的所有 npm 包</p></li><li><p><span style="color:red;">npm outdated</span> : 查看当前项目需要更新的包</p></li><li><p><span style="color:red;">npm login</span> : 登录 npm 账号</p></li><li><p><span style="color:red;">npm logout</span> : 退出 npm 账号</p></li><li><p><span style="color:red;">npm publish</span> : 将自己开发的包发布的 npm 官网中</p></li><li><p><span style="color:red;">npm link</span> : 将本地模块链接到全局的 node_modules 目录下</p></li><li><p><span style="color:red;">npm config list</span> : 用于列出 npm 配置信息 。 执行该命令可以查看当前系统和用户级别的所有 npm 配置信息以及当前项目的配置信息(如果在当前项目执行该命令)</p></li><li><p><span style="color:red;">npm get 配置名</span> : 通过<code>npm config list</code>获取配置</p></li><li><p><span style="color:red;">npm set 配置名 配置内容</span> : 通过<code>npm config list</code>获取配置</p></li></ol><h3 id="应用场景" tabindex="-1">应用场景 <a class="header-anchor" href="#应用场景" aria-label="Permalink to &quot;应用场景&quot;">​</a></h3><ol><li>前端: Vue、Angular、React、nuxtjs、nextjs</li><li>后端: serverLess、web 应用、epxress 、Nestjs 、koa、RPC 、服务 、gRPC、爬虫 、Puppeteer 、cheerioBFF 层、 网关层、</li><li>及时性应用: socket.io</li><li>桌前端：electron、tauri、NWjs</li><li>移动端：weex、ionic、hybrid、React Native</li><li>基建端：webpack、 vite、 rollup、 gulp、less、 scss、postCss、babel、 swc、inquire、 command 、shelljs</li><li>嵌入式：Ruffjs</li><li>单元测试：jest、 vitest、 e2e</li><li>CICD：Jenkins、 docker、 Husky 、miniprogram-ci</li><li>反向代理：http-proxy 、Any-proxy</li></ol>`,16),o=[p];function t(r,d,c,h,m,u){return a(),n("div",null,o)}const b=e(i,[["render",t]]);export{g as __pageData,b as default};

import{_ as s,c as e,o as i,a3 as a}from"./chunks/framework.DStOEALM.js";const F=JSON.parse('{"title":"","description":"","frontmatter":{"outline":"deep","prev":{"text":"项目构建(mvc+ioc+装饰器+jwt(token验证))","link":"/node/build_project/build_project"},"next":{"text":"redis基本使用","link":"/node/redis/basicUse"}},"headers":[],"relativePath":"node/redis/index.md","filePath":"node/redis/index.md"}'),n={name:"node/redis/index.md"},l=a(`<h2 id="redis" tabindex="-1">redis <a class="header-anchor" href="#redis" aria-label="Permalink to &quot;redis&quot;">​</a></h2><p>Redis（Remote Dictionary Server）是一个开源的内存数据结构存储系统，它提供了一个高效的键值存储解决方案，并支持多种数据结构，如字符串（Strings）、哈希（Hashes）、列表（Lists）、集合（Sets）和有序集合（Sorted Sets）等。它被广泛应用于缓存、消息队列、实时统计等场景</p><h2 id="特性和用途" tabindex="-1">特性和用途 <a class="header-anchor" href="#特性和用途" aria-label="Permalink to &quot;特性和用途&quot;">​</a></h2><ol><li><code>内存存储</code>：Redis 主要将数据存储在内存中，因此具有快速的读写性能。它可以持久化数据到磁盘，以便在重新启动后恢复数据</li><li><code>多种数据结构</code>：Redis 不仅仅是一个简单的键值存储，它支持多种数据结构，如字符串、哈希、列表、集合和有序集合。这些数据结构使得 Redis 能够更灵活地存储和操作数据</li><li><code>发布/订阅</code>：Redis 支持发布/订阅模式，允许多个客户端订阅一个或多个频道，以接收实时发布的消息。这使得 Redis 可以用作实时消息系统</li><li><code>事务支持</code>：Redis 支持事务，可以将多个命令打包成一个原子操作执行，确保这些命令要么全部执行成功，要么全部失败</li><li><code>持久化</code>：Redis 提供了两种持久化数据的方式：RDB（Redis Database）和 AOF（Append Only File）。 RDB 是将数据以快照形式保存到磁盘，而 AOF 是将每个写操作追加到文件中。这些机制可以确保数据在意外宕机或重启后的持久性</li><li><code>高可用性</code>：Redis 支持主从复制和 Sentinel 哨兵机制。通过主从复制，可以创建多个 Redis 实例的副本，以提高读取性能和容错能力。 Sentinel 是一个用于监控和自动故障转移的系统，它可以在主节点宕机时自动将从节点提升为主节点</li><li><code>缓存</code>：由于 Redis 具有快速的读写性能和灵活的数据结构，它被广泛用作缓存层。它可以将常用的数据存储在内存中，以加快数据访问速度，减轻后端数据库的负载</li><li><code>实时统计</code>：Redis 的计数器和有序集合等数据结构使其非常适合实时统计场景。它可以存储和更新计数器，并对有序集合进行排名和范围查询，用于统计和排行榜功能</li></ol><h2 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h2><ul><li><p><code>windows安装</code>: 具体详情，请看这篇<a href="https://blog.csdn.net/m0_63230155/article/details/131951639" target="_blank" rel="noreferrer">文章</a></p></li><li><p><code>mac安装</code>:</p></li></ul><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># homebrew 安装</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">brew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> redis</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 启动, 有两种方法</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 1. brew启动</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">brew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> services</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> redis</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 2. 命令启动</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">redis-server</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 启动完以后，才能进入命令行</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">redis-cli</span></span></code></pre></div><h2 id="可视化工具" tabindex="-1">可视化工具 <a class="header-anchor" href="#可视化工具" aria-label="Permalink to &quot;可视化工具&quot;">​</a></h2><p><code>vscode</code>中下载<code>database client</code>插件，也就是之前使用<code>mysql</code>可视化的那个插件,在连接的时候选择<code>redis</code>即可</p>`,9),d=[l];function t(o,r,c,p,h,k){return i(),e("div",null,d)}const b=s(n,[["render",t]]);export{F as __pageData,b as default};

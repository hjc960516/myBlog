import{_ as s,c as a,o as i,a3 as e}from"./chunks/framework.DStOEALM.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{"outline":"deep","prev":{"text":"redis基本使用","link":"/node/redis/basicUse"},"next":{"text":"持久化和主从复制","link":"/node/redis/persistence_masterSlave"}},"headers":[],"relativePath":"node/redis/publish_subscribeAndTransaction.md","filePath":"node/redis/publish_subscribeAndTransaction.md"}'),n={name:"node/redis/publish_subscribeAndTransaction.md"},l=e(`<h2 id="发布订阅" tabindex="-1">发布订阅 <a class="header-anchor" href="#发布订阅" aria-label="Permalink to &quot;发布订阅&quot;">​</a></h2><p>发布-订阅是一种消息传递模式，其中消息发布者（发布者）将消息发送到频道（channel），而订阅者（订阅者）可以订阅一个或多个频道以接收消息。 这种模式允许消息的解耦，发布者和订阅者之间可以独立操作，不需要直接交互</p><h3 id="命令" tabindex="-1">命令 <a class="header-anchor" href="#命令" aria-label="Permalink to &quot;命令&quot;">​</a></h3><ol><li><p><code>PUBLISH命令</code>: 于将消息发布到指定的频道。语法为：<code>PUBLISH channel message</code>。 例如，<code>PUBLISH test &quot;Hello, world!&quot;</code> 将消息<code>&quot;Hello, world!&quot;</code>发布到名为<code>test</code>的频道</p></li><li><p><code>SUBSCRIBE命令</code>: 用于订阅一个或多个频道。语法为：<code>SUBSCRIBE channel [channel ...]</code>。例如，<code>SUBSCRIBE test sports</code> 订阅了名为<code>&quot;test&quot;</code>和<code>&quot;sports&quot;</code>的频道</p></li><li><p><code>UNSUBSCRIBE命令</code>：用于取消订阅一个或多个频道。语法为：<code>UNSUBSCRIBE [channel [channel ...]]</code>。例如，<code>UNSUBSCRIBE test</code> 取消订阅名为<code>&quot;test&quot;</code>的频道</p></li><li><p><code>PSUBSCRIBE命令</code>：用于模式订阅一个或多个匹配的频道。语法为：<code>PSUBSCRIBE pattern [pattern ...]</code>。 其中，<code>pattern</code>可以包含通配符。例如，<code>PSUBSCRIBE test.*</code> 订阅了以<code>&quot;test.&quot;</code>开头的所有频道</p></li><li><p><code>PUNSUBSCRIBE命令</code>：用于取消模式订阅一个或多个匹配的频道。语法为：<code>PUNSUBSCRIBE [pattern [pattern ...]]</code>。 例如，<code>PUNSUBSCRIBE test.*</code> 取消订阅以<code>&quot;test.&quot;</code>开头的所有频道</p></li></ol><h3 id="例子" tabindex="-1">例子 <a class="header-anchor" href="#例子" aria-label="Permalink to &quot;例子&quot;">​</a></h3><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 启动redis</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">redis-server</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 启动redis脚手架</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">redis-cli</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 订阅</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">subscribe</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test</span></span></code></pre></div><h4 id="另起一个终端" tabindex="-1">另起一个终端 <a class="header-anchor" href="#另起一个终端" aria-label="Permalink to &quot;另起一个终端&quot;">​</a></h4><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 启动redis脚手架</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">redis-cli</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 发送信息</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 另外一个订阅的终端会收到信息，也可以多起几个终端进行订阅</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">publish</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;hahahaha&quot;</span></span></code></pre></div><h2 id="事务" tabindex="-1">事务 <a class="header-anchor" href="#事务" aria-label="Permalink to &quot;事务&quot;">​</a></h2><p>类似<code>mysql</code>的事务，要么都成功，要么都失败。<code>不一样的</code>是<code>mysql</code>是可以回滚， <code>redis</code>是没有的<br> Redis 支持事务（Transaction），它允许用户将多个命令打包在一起作为一个单元进行执行。事务提供了一种原子性操作的机制，要么所有的命令都执行成功，要么所有的命令都不执行</p><h3 id="命令-1" tabindex="-1">命令 <a class="header-anchor" href="#命令-1" aria-label="Permalink to &quot;命令&quot;">​</a></h3><ol><li><code>MULTI 命令</code>：用于开启一个事务。在执行 MULTI 命令后，Redis 会将接下来的命令都添加到事务队列中，而不是立即执行</li><li><code>EXEC 命令</code>：用于执行事务中的所有命令。当执行 EXEC 命令时，Redis 会按照事务队列中的顺序执行所有的命令。执行结果以数组的形式返回给客户端</li><li><code>WATCH 命令</code>：用于对一个或多个键进行监视。如果在事务执行之前，被监视的键被修改了，事务将被中断，不会执行</li><li><code>DISCARD命令</code>：用于取消事务。当执行 DISCARD 命令时，所有在事务队列中的命令都会被清空，事务被取消</li></ol><h3 id="例子-1" tabindex="-1">例子 <a class="header-anchor" href="#例子-1" aria-label="Permalink to &quot;例子&quot;">​</a></h3><p>还是<code>mysql转钱例子</code>, <code>a</code> 给 <code>b</code> 转钱，<code>a</code>需要扣除对应的钱，而<code>b</code>需要增加对应的钱， 这两件事是需要同时完成的，要么成功要么失败，否则会丢失</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> a</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> b</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 开启事务</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">multi</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 添加事件队列</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># a给b转钱50，那么a就需要扣除50</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> a</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 50</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 添加事件队列</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># b需要增加50</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> b</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 150</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 执行队列, 执行完毕会退出事务，如果不想执行那么可以手动退出事务，也就是 discard 命令</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exec</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查看值</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> a</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> b</span></span></code></pre></div>`,15),t=[l];function p(d,h,c,o,r,k){return i(),a("div",null,t)}const F=s(n,[["render",p]]);export{g as __pageData,F as default};

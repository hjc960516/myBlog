import{_ as s,c as i,o as a,a3 as n}from"./chunks/framework.CPUa57fC.js";const E=JSON.parse('{"title":"","description":"","frontmatter":{"outline":"deep","prev":{"text":"path模块和posix","link":"/node/path_windows&posix"},"next":{"text":"child_process模块","link":"/node/child_process"}},"headers":[],"relativePath":"node/os.md","filePath":"node/os.md"}'),l={name:"node/os.md"},e=n(`<h2 id="os-模块" tabindex="-1">os 模块 <a class="header-anchor" href="#os-模块" aria-label="Permalink to &quot;os 模块&quot;">​</a></h2><p>主要用于与系统交互</p><h2 id="os-的-api" tabindex="-1">os 的 API <a class="header-anchor" href="#os-的-api" aria-label="Permalink to &quot;os 的 API&quot;">​</a></h2><h3 id="os-type-返回系统的名称-在liux返回liux-在macos-返回-darwin-在windows上返回windows-nt" tabindex="-1"><code>os.type()</code>: 返回系统的名称, 在<code>Liux</code>返回<code>Liux</code>, 在<code>macos</code> 返回 <code>Darwin</code>, 在<code>windows</code>上返回<code>windows_NT</code> <a class="header-anchor" href="#os-type-返回系统的名称-在liux返回liux-在macos-返回-darwin-在windows上返回windows-nt" aria-label="Permalink to &quot;\`os.type()\`: 返回系统的名称, 在\`Liux\`返回\`Liux\`, 在\`macos\` 返回 \`Darwin\`, 在\`windows\`上返回\`windows_NT\`&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> os</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;node:os&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Darwin,  也就是MacOS</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(os.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span></code></pre></div><h3 id="os-platform-操作平台-aix-、-darwin-、-freebsd-、-linux-、-openbsd-、-sunos-、以及-win32" tabindex="-1"><code>os.platform()</code>: 操作平台, <code>&#39;aix&#39;</code>、<code>&#39;darwin&#39;</code>、<code>&#39;freebsd&#39;</code>、<code>&#39;linux&#39;</code>、<code>&#39;openbsd&#39;</code>、<code>&#39;sunos&#39;</code>、以及 <code>&#39;win32&#39;</code> <a class="header-anchor" href="#os-platform-操作平台-aix-、-darwin-、-freebsd-、-linux-、-openbsd-、-sunos-、以及-win32" aria-label="Permalink to &quot;\`os.platform()\`: 操作平台, \`&#39;aix&#39;\`、\`&#39;darwin&#39;\`、\`&#39;freebsd&#39;\`、\`&#39;linux&#39;\`、\`&#39;openbsd&#39;\`、\`&#39;sunos&#39;\`、以及 \`&#39;win32&#39;\`&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Darwin,  也就是MacOS</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 值有可能是 &#39;aix&#39;、&#39;darwin&#39;、&#39;freebsd&#39;、&#39;linux&#39;、&#39;openbsd&#39;、&#39;sunos&#39;、以及 &#39;win32&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(os.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">platform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span></code></pre></div><h3 id="os-release-操作系统版本号" tabindex="-1"><code>os.release()</code>: 操作系统版本号 <a class="header-anchor" href="#os-release-操作系统版本号" aria-label="Permalink to &quot;\`os.release()\`: 操作系统版本号&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 21.5.0 系统版本号</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(os.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">release</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span></code></pre></div><h3 id="os-homedir-返回用户目录-例如-c-user-xxx-原理在windows就是-echo-userprofile-在posix就是-home" tabindex="-1"><code>os.homedir()</code>: 返回用户目录, 例如：<code>C:\\user/xxx</code> 原理在<code>windows</code>就是 <code>echo %USERPROFILE%</code>,在<code>posix</code>就是<code>$HOME</code> <a class="header-anchor" href="#os-homedir-返回用户目录-例如-c-user-xxx-原理在windows就是-echo-userprofile-在posix就是-home" aria-label="Permalink to &quot;\`os.homedir()\`: 返回用户目录, 例如：\`C:\\user/xxx\` 原理在\`windows\`就是 \`echo %USERPROFILE%\`,在\`posix\`就是\`$HOME\`&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// windows: C:\\user/xxx</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// posix: $HOME</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(os.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">homedir</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span></code></pre></div><h3 id="os-arch-cpu-架构-arm-、-arm64-、-ia32-、-mips-、-mipsel-、-ppc-、-ppc64-、-s390-、-s390x-、-x64" tabindex="-1"><code>os.arch()</code>: cpu 架构, <code>&#39;arm&#39;、&#39;arm64&#39;、&#39;ia32&#39;、&#39;mips&#39;、&#39;mipsel&#39;、&#39;ppc&#39;、&#39;ppc64&#39;、&#39;s390&#39;、&#39;s390x&#39;、&#39;x64&#39;</code> <a class="header-anchor" href="#os-arch-cpu-架构-arm-、-arm64-、-ia32-、-mips-、-mipsel-、-ppc-、-ppc64-、-s390-、-s390x-、-x64" aria-label="Permalink to &quot;\`os.arch()\`: cpu 架构, \`&#39;arm&#39;、&#39;arm64&#39;、&#39;ia32&#39;、&#39;mips&#39;、&#39;mipsel&#39;、&#39;ppc&#39;、&#39;ppc64&#39;、&#39;s390&#39;、&#39;s390x&#39;、&#39;x64&#39;\`&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// x64 cpu架构</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;arm&#39;、&#39;arm64&#39;、&#39;ia32&#39;、&#39;mips&#39;、&#39;mipsel&#39;、&#39;ppc&#39;、&#39;ppc64&#39;、&#39;s390&#39;、&#39;s390x&#39;、&#39;x64&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(os.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">arch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span></code></pre></div><h3 id="os-cpus-cup-核心信息的数组" tabindex="-1"><code>os.cpus()</code>: cup 核心信息的数组 <a class="header-anchor" href="#os-cpus-cup-核心信息的数组" aria-label="Permalink to &quot;\`os.cpus()\`: cup 核心信息的数组&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// CPU 内核的信息的对象数组</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * [</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *  {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * // 表示cpu的型号信息 其中 &quot;Intel(R) Core(TM) i7-4770HQ CPU @ 2.20GHz&quot; 是一种具体的型号描述</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    model: &#39;Intel(R) Core(TM) i7-4770HQ CPU @ 2.20GHz&#39;, </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 表示cpu的时钟速度,MHZ或GHZ为单位，在这情况速度为2200MHZ或2.200GHZ</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    speed: 2200,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // CPU使用时间对象</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    times: { </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 表示cpu被用户的应用程序使用的时间 （以毫秒为单位）</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      user: 5444230, </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 表示cpu被优先级较低的用户程序使用时间 （以毫秒为单位）</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      nice: 0, </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 表示cpu被 系统内核使用的时间 （以毫秒为单位）</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      sys: 3097150, </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 表示cpu 处于空闲状态的时间（以毫秒为单位）</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      idle: 327856960, </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 表示cpu被硬件中断处理应用程序使用时间 （以毫秒为单位）</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      irq: 0 </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * ]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(os.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cpus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// cpu核心数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(os.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cpus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h3 id="os-availableparallelism-node18-14-版本以上新增-api-用来获取核心数的" tabindex="-1"><code>os.availableParallelism()</code>: <code>node18.14</code> 版本以上新增 API， 用来获取核心数的 <a class="header-anchor" href="#os-availableparallelism-node18-14-版本以上新增-api-用来获取核心数的" aria-label="Permalink to &quot;\`os.availableParallelism()\`: \`node18.14\` 版本以上新增 API， 用来获取核心数的&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// node18以上版本新增api，获取核心数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(os.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">availableParallelism</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span></code></pre></div><h3 id="os-networkinterfaces-获取已分配网络地址的网络接口对象" tabindex="-1"><code>os.networkInterfaces()</code>: 获取已分配网络地址的网络接口对象 <a class="header-anchor" href="#os-networkinterfaces-获取已分配网络地址的网络接口对象" aria-label="Permalink to &quot;\`os.networkInterfaces()\`: 获取已分配网络地址的网络接口对象&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 表示本地回环接口的IP地址 分配的IPV4和IPV6地址 这里是 &#39;127.0.0.1&#39;。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      address: &#39;127.0.0.1&#39;,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //  表示本地回环接口的子网掩码 IPV4或IPV6网络掩码 这里是 &#39;255.0.0.0&#39;。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      netmask: &#39;255.0.0.0&#39;,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //  表示本地回环接口的IP地址类型 IPV4或IPV6地址类型 这里是 &#39;IPv4&#39;。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      family: &#39;IPv4&#39;,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 数字的IPV6范围ID (仅在family为IPV6时指定)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      scopeid: 1</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 表示本地回环接口的MAC地址 这里是00:00:00:00:00:00请注意，本地回环接口通常不涉及硬件，因此MAC地址通常为全零</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      mac: &#39;00:00:00:00:00:00&#39;,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 表示本地回环接口是否是内部接口，这里是 true，表示它是一个内部接口。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      internal: true,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 表示本地回环接口的CIDR 表示法 即网络地址和子网掩码的组合，这里是127.0.0.1/8 表示整个 127.0.0.0 网络</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      cidr: &#39;127.0.0.1/8&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    },</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(os.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">networkInterfaces</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span></code></pre></div><h2 id="实现-webpack-和-vite-的自动打开网页功能" tabindex="-1">实现 webpack 和 vite 的自动打开网页功能 <a class="header-anchor" href="#实现-webpack-和-vite-的自动打开网页功能" aria-label="Permalink to &quot;实现 webpack 和 vite 的自动打开网页功能&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 利用os对象判断系统实现 webpack和vite的自动打开网页功能</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> child_process</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;child_process&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> platform</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> os.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">platform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> address</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;https://www.baidu.com&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// windows</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (platform </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;win32&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  child_process.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">exec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`start \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">address</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// mac</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (platform </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;darwin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  child_process.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">exec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`open \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">address</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,21),p=[e];function h(t,k,d,o,r,c){return a(),i("div",null,p)}const y=s(l,[["render",h]]);export{E as __pageData,y as default};

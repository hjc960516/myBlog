import{_ as s,c as i,o as a,a3 as n}from"./chunks/framework.yy2qzmv1.js";const E=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"nuxtjs/24构建和部署.md","filePath":"nuxtjs/24构建和部署.md"}'),e={name:"nuxtjs/24构建和部署.md"},l=n(`<h2 id="构建和部署" tabindex="-1">构建和部署 <a class="header-anchor" href="#构建和部署" aria-label="Permalink to &quot;构建和部署&quot;">​</a></h2><p><a href="https://nuxt.com/docs/4.x/getting-started/deployment" target="_blank" rel="noreferrer">官网地址</a><br> 有好几种构建和部署方式，下面是官方提供的几种方式：</p><ol><li><code>node.js:server</code></li></ol><ul><li>没有特殊配置时，会默认输出格式</li><li>按需加载，加速冷启动</li><li>适配任何的<code>nodejs</code>版本<code>(18+以上)</code></li><li>内置的<code>cluster mode(多进程模式)</code></li></ul><ol start="2"><li><code>static hosting静态文件部署</code></li></ol><ul><li><p><code>ssg(static site generation)模式</code>: 在构建以后自动生成所有相关路由的静态文件<code>(通过 nitro 爬虫完成)</code>,有多少个路由就有多少个静态页面，有利于<code>seo</code>和<code>加载速度</code></p></li><li><p><code>client-side only rendering (ssr:false)</code>: <code>spa应用</code>,只有一个入口文件，HTML 中只有一个<code>&lt;div class=&quot;__nuxt&quot;&gt;&lt;/div&gt;&gt;</code>DOM 节点，所有的内容都通过<code>js</code>进行加载</p></li></ul><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// nuxt.config.ts</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineNuxtConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ssr: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><ol start="3"><li>部署到第三方平台</li></ol><p><a href="https://nuxt.com/deploy" target="_blank" rel="noreferrer">所有第三方平台预览地址</a></p><h2 id="构建例子" tabindex="-1">构建例子 <a class="header-anchor" href="#构建例子" aria-label="Permalink to &quot;构建例子&quot;">​</a></h2><p>使用的是<code>nodejs-server</code>方法进行构建</p><h3 id="执行打包命令" tabindex="-1">执行打包命令 <a class="header-anchor" href="#执行打包命令" aria-label="Permalink to &quot;执行打包命令&quot;">​</a></h3><p>打包完以后, 有<code>public</code>和<code>server</code>两个，<code>public</code>是<code>前端(客户端)</code>的静态文件, <code>server</code>是<code>后端(服务器)</code>的静态文件</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span></span></code></pre></div><h3 id="执行预览命令" tabindex="-1">执行预览命令 <a class="header-anchor" href="#执行预览命令" aria-label="Permalink to &quot;执行预览命令&quot;">​</a></h3><p>使用<code>node</code>环境去执行打包后的文件<code>.output/server/index.mjs</code>文件, 需要<code>node20</code>版本以上，否则会无法读取到<code>.env</code>环境变量文件</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## node20之前的版本</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">### 只能通过 变量名=变量值 这种方式设置环境变量</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## node20++版本</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">### --env-file: 指定环境变量文件</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">### PORT: 设置端口号，默认是3000</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">### PORT: 设置主机地址，默认是\`0.0.0.0\`</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># PORT=3000 HOST=0.0.0.0 node --env-file=.env .output/server/index.mjs</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --env-file=.env</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .output/server/index.mjs</span></span></code></pre></div><h3 id="编写脚本-deploy-sh" tabindex="-1">编写脚本(<code>deploy.sh</code>) <a class="header-anchor" href="#编写脚本-deploy-sh" aria-label="Permalink to &quot;编写脚本(\`deploy.sh\`)&quot;">​</a></h3><p>需要先设置<code>免登陆</code>, 具体请看这篇<a href="/myBlog/server.html">服务器基本操作文章</a>, 还需要安装各种<code>所需工具</code>和<code>环境变量</code>等，这个因为每个服务器不一样，所以需要根据你自己的实际情况进行安装</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#!/bin/bash  ## 指定使用bash脚本</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 打包 .output 文件夹 为 dist.tar.gz</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># -zcvf: 压缩文件, -z: 压缩, -c: 创建, -v: 显示详细信息, -f: 指定文件名</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># dist.tar.gz: 压缩后的文件名</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># .output: 要压缩的文件夹</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tar</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -zcvf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dist.tar.gz</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .output</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># SCP 上传 dist.tar.gz 压缩包到 服务器</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># SCP: 传输文件</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># dist.tar.gz: 要上传的文件名</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># user: 服务器用户名</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># server: 服务器地址</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># ~/admin: 服务器上的目标目录</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">scp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dist.tar.gz</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> user@server:~/admin</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 在服务器上解压 dist.tar.gz 压缩包</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># ssh: 连接到服务器</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># user@server: 服务器账号@服务器地址</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># &quot;tar -zxvf dist.tar.gz -C ~/admin&quot;: 在服务器运行的命令</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## -zxvf: 解压文件, -z: 压缩, -x: 解压, -v: 显示详细信息, -f: 指定文件名</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## dist.tar.gz: 需要解压的文件</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## -C: 指定解压到的目录</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## ~/admin: 服务器上的目标目录</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ssh</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> user@server</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;tar -zxvf dist.tar.gz -C ~/admin&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 清理本地和服务器上的临时文件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dist.tar.gz</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 清理本地压缩包</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ssh</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> user@server</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;rm ~/admin/dist.tar.gz&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 清理服务器上的压缩包</span></span></code></pre></div><h3 id="使用-pm2-管理和启动应用" tabindex="-1">使用 pm2 管理和启动应用 <a class="header-anchor" href="#使用-pm2-管理和启动应用" aria-label="Permalink to &quot;使用 pm2 管理和启动应用&quot;">​</a></h3><p>主机上需要准备的环境:</p><ul><li>mongoDB</li><li>Redis</li><li>node&gt;=20</li><li>.env 文件</li></ul><ol><li>连接进入服务器</li></ol><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ssh</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> user@server</span></span></code></pre></div><ol start="2"><li><p>将<code>.env</code>环境变量文件放置你需要启动的应用目录中</p></li><li><p>安装<code>pm2</code><code>pm2</code>在<code>node</code>模块已经详细介绍过，具体请看: <a href="/myBlog/node/pm2.html">pm2 部署</a></p></li></ol><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -g</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pm2</span></span></code></pre></div><ol start="4"><li>启动并添加到<code>pm2</code>管理</li></ol><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查看是否安装成功</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pm2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --version</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># pm2 启动</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># start: 启动应用</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># --name: 设置应用的名称</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># --node-args: 添加环境变量</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># --env-file=.env: 指定环境变量文件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pm2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .output/server/index.mjs</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [启动应用的名称] --node-args</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;--env-file=.env&quot;</span></span></code></pre></div><p>5.<code>pm2</code> 配置文件(可选) 加入你的环境变量过多, 可以在<code>pm2</code>的配置文件中进行配置, 具体请看: <a href="https://pm2.keymetrics.io/docs/usage/application-declaration/" target="_blank" rel="noreferrer">官方文档</a></p><ul><li>生成配置文件</li></ul><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pm2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> init</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> simple</span></span></code></pre></div><ul><li>配置文件(ecosystem.config.js)</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  apps: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;myApp&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 应用名称</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      port: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 端口</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      exec_mode: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;cluster&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 模式, cluster: 集群模式, fork: 单进程模式</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      script: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./output/server/index.mjs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 脚本路径, 也就是要启动的应用</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      instances: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;max&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 实例数, max表示自动分配</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      node_args: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;--env-file=.env&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 设置变量，这里是设置指定环境变量文件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><h2 id="bun" tabindex="-1">bun <a class="header-anchor" href="#bun" aria-label="Permalink to &quot;bun&quot;">​</a></h2><p><a href="https://bun.com/" target="_blank" rel="noreferrer">官网</a>, <code>bun</code>是一个<code>node.js</code>的替代品, 速度更快, 更小, 更安全, 更易用</p><h3 id="优势" tabindex="-1">优势 <a class="header-anchor" href="#优势" aria-label="Permalink to &quot;优势&quot;">​</a></h3><ol><li><code>javascript-runtime</code>运行时，就是一个提供使用和运行程序的环境</li></ol><ul><li>速度快</li><li>全面兼容 <code>node.js</code> 的 <code>API</code></li><li>直接支持<code>ts</code></li><li>无脑支持<code>jsx</code>、<code>tsx</code></li><li>原生兼容 <code>CJS/ESM</code>, 不需要任何配置，甚至在同一个文件中可以同时支持<code>import</code>和<code>require()</code></li></ul><ol start="2"><li>包管理器</li></ol><ul><li>兼容<code>node.js</code></li><li>支持<code>monorepo</code></li><li>速度快</li><li>全局<code>Cache(缓存)</code></li></ul><ol start="3"><li><code>Test Runner</code> 测试运行器</li></ol><ul><li>完全支持<code>jest</code>语法</li><li>速度快</li><li>自带 <code>DOM API</code></li></ul><h3 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h3><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># mac 或者 linux</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -fsSL</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://bun.sh/install</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> bash</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># windows</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">powershell</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;irm bun.sh/install.ps1 | iex&quot;</span></span></code></pre></div><h3 id="天生支持环境变量" tabindex="-1">天生支持环境变量 <a class="header-anchor" href="#天生支持环境变量" aria-label="Permalink to &quot;天生支持环境变量&quot;">​</a></h3><p>直接支持<code>.env</code>、<code>.env.production, .env.development, .env.test (depending on value of NODE_ENV)</code>、<code>.env.local</code>等，无需额外配置, <a href="https://bun.com/docs/runtime/env" target="_blank" rel="noreferrer">官方文档</a><br> 例如: 刚刚的例子，是用<code>bun</code>运行</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/admin</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bun</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .output/server/index.mjs</span></span></code></pre></div><h3 id="配合-pm2-使用" tabindex="-1">配合 <code>pm2</code> 使用 <a class="header-anchor" href="#配合-pm2-使用" aria-label="Permalink to &quot;配合 \`pm2\` 使用&quot;">​</a></h3><p>配置文件(<code>ecosystem.config.js</code>)</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  apps: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;myApp&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 应用名称</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      port: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 端口</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      exec_mode: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;cluster&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 模式, cluster: 集群模式, fork: 单进程模式</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      script: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./output/server/index.mjs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 脚本路径, 也就是要启动的应用</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      instances: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;max&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 实例数, max表示自动分配</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // node_args: &quot;--env-file=.env&quot;, // 设置变量，这里是设置指定环境变量文件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      interpreter: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;bun的路径&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用 bun 作为解释器, 使用 which bun 获取bun的路径，将bun的路径放进interpreter</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div>`,51),t=[l];function p(h,k,d,r,o,c){return a(),i("div",null,t)}const u=s(e,[["render",p]]);export{E as __pageData,u as default};

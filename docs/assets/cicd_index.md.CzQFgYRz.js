import{_ as e,c as i,o as c,a3 as d}from"./chunks/framework.yy2qzmv1.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{"outline":"deep","prev":{"text":"vue3的渲染器、生命周期、组件、nextTick","link":"/vue/render"},"next":{"text":"自定义项目cicd","link":"/cicd/custom"}},"headers":[],"relativePath":"cicd/index.md","filePath":"cicd/index.md"}'),s={name:"cicd/index.md"},o=d(`<h2 id="cicd" tabindex="-1">cicd <a class="header-anchor" href="#cicd" aria-label="Permalink to &quot;cicd&quot;">​</a></h2><p><code>cicd</code>称为持续集成和持续交付，是一种软件开发的实践，它的核心思想是将软件开发过程中的各个环节（包括测试、构建、部署等）都集成到一个自动化的流程中，以提高软件开发的效率和质量。<br><code>cicd</code>的主要目标是通过自动化的方式，将软件开发过程中的各个环节都集成到一个自动化的流程中，以提高软件开发的效率和质量。具体来说，<code>cicd</code>的主要目标包括：<br></p><ol><li>提高软件开发的效率：通过自动化的方式，将软件开发过程中的各个环节都集成到一个自动化的流程中，以提高软件开发的效率。</li><li>提高软件开发的质量：通过自动化的方式，将软件开发过程中的各个环节都集成到一个自动化的流程中，以提高软件开发的质量。</li></ol><h2 id="两种方法" tabindex="-1">两种方法 <a class="header-anchor" href="#两种方法" aria-label="Permalink to &quot;两种方法&quot;">​</a></h2><p>我使用的<code>cicd</code>的两种方法：</p><ol><li>基于<code>github</code>的<code>actions</code> 其实就是在<code>github</code>上创建一个<code>actions</code>，然后在<code>github</code>的<code>某个钩子</code>前进行自己写的<code>cicd流程</code><br></li><li>基于<code>jenkins</code>的<code>pipeline</code> 基于工具<code>jenkins</code>进行</li></ol><h2 id="示例项目" tabindex="-1">示例项目 <a class="header-anchor" href="#示例项目" aria-label="Permalink to &quot;示例项目&quot;">​</a></h2><p>创建项目前，需要有自己的服务器，我在这里使用的是阿里云的服务器</p><h3 id="前置知识" tabindex="-1">前置知识 <a class="header-anchor" href="#前置知识" aria-label="Permalink to &quot;前置知识&quot;">​</a></h3><ol><li><code>ssh</code>: 连接服务器</li></ol><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## 连接服务器</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## -p 22: 端口号</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## root: 用户名,账号,默认是 root</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## ipaddress: 服务器的 ip 地址，也就是服务器的公网地址</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ssh</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 22</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> root@ipaddress</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## 输入密码,输入密码后，会进入服务器</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## ls: 查看当前目录下的文件, 如果没有任何输出，切到上一层目录</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ls</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## cd ..: 进入上一层目录</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ..</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## 退出服务器</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exit</span></span></code></pre></div><ol start="2"><li><p><code>linux</code>命令: 一些常用的命令, 和<code>mac系统</code>差不多</p><ul><li><code>pwd</code>: 查看当前目录的路径</li><li><code>ls</code>: 查看当前目录下的文件</li><li><code>cd</code>: 进入目录</li><li><code>mkdir</code>: 创建目录</li><li><code>touch</code>: 创建文件</li><li><code>vim</code>: 编辑文件</li><li><code>cat</code>: 查看文件内容</li><li><code>echo</code>: 输出内容</li><li><code>rm</code>: 删除文件</li><li><code>mv</code>: 移动文件</li><li><code>cp</code>: 复制文件</li><li><code>chmod</code>: 修改文件权限</li><li><code>scp</code>: 复制文件到服务器</li><li><code>ssh-keygen</code>: 生成 ssh 密钥</li><li><code>ssh-copy-id</code>: 将 ssh 密钥复制到服务器</li><li><code>ssh-agent</code>: 管理 ssh 密钥</li><li><code>ssh-add</code>: 添加 ssh 密钥</li><li><code>ssh-keyscan</code>: 扫描服务器的 ssh 密钥</li><li><code>ssh-connect</code>: 连接服务器</li><li><code>ssh-config</code>: 配置 ssh</li></ul></li><li><p><code>nodejs</code>: 基于<code>nodejs</code>进行开发</p><ol><li><code>npm</code>: 包管理工具</li><li><code>yarn</code>: 包管理工具</li><li><code>pnpm</code>: 包管理工具</li><li><code>nvm</code>: 版本管理工具</li><li><code>pnpm</code>: <code>npm install -g pnpm</code>: 安装<code>pnpm</code></li></ol></li><li><p><code>vim</code>：编辑器，常用命令</p></li></ol><ul><li><code>vim xxx</code>: 编辑某文件, 然后就可以进行下面的命令操作</li><li><code>i</code>: 进入编辑</li><li><code>:wq</code>: <code>w</code>是保存，<code>q</code>是退出，完整就是保存并退出</li><li><code>:q!</code>: 退出不保存</li><li><code>:w</code>: 保存</li><li><code>:q</code>: 退出</li></ul><ol start="5"><li><code>husky</code>: <code>git</code> 钩子</li></ol><ul><li><code>pre-commit</code>: 提交之前</li><li><code>post-commit</code>: 提交之后</li><li><code>pre-push</code>: 提交代码之前</li><li><code>post-push</code>: 提交代码之后</li><li><code>pre-merge</code>: 合并代码之前</li><li><code>post-merge</code>: 合并代码之后</li></ul><h3 id="示例目录以及解析" tabindex="-1">示例目录以及解析 <a class="header-anchor" href="#示例目录以及解析" aria-label="Permalink to &quot;示例目录以及解析&quot;">​</a></h3><p>├── github_cicd: <code>github 的 cicd 流程</code> │ ├── utils: <code>项目的工具文件</code> │ │ ├── build.js: <code>打包项目</code> │ │ ├── compressFile.js: <code>压缩文件</code> │ │ ├── handleCommand.js: <code>处理操作 linux 服务器命令</code> │ │ ├── helper.js: <code>命令行工具处理</code> │ │ ├── ssh.js: <code>连接 linux 服务器</code> │ │ └── upload.js: <code>上传文件</code> │ ├── config.js: <code>项目的配置</code> │ ├── package.json: <code>项目的配置文件</code> │ └── app.js: <code>项目的入口文件</code> ├── jenkins_cicd: <code>jenkins 的 cicd 流程</code> │ ├── Jenkinsfile: <code>jenkins 的 流水线文件</code> │ └── README.md: <code>jenkins 的 cicd 流程</code> └── vite-project: <code>示例项目</code></p>`,17),l=[o];function a(n,t,p,h,r,k){return c(),i("div",null,l)}const g=e(s,[["render",a]]);export{m as __pageData,g as default};
